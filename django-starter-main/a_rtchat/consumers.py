# Below handles our websocket connection
import json
from channels.generic.websocket import WebsocketConsumer, AsyncWebsocketConsumer
from django.shortcuts import get_object_or_404
from django.template.loader import render_to_string
from asgiref.sync import async_to_sync
from .models import *

# class ChatroomConsumer(WebsocketConsumer):
class ChatroomConsumer(WebsocketConsumer):
    def connect(self):
        self.user = self.scope['user']
        self.chatroom_name = self.scope['url_route']['kwargs']['chatroom_name']
        self.chatroom = get_object_or_404(ChatGroup, group_name = self.chatroom_name)
        
        async_to_sync(self.channel_layer.group_add)(
            self.chatroom_name,
            # The channel name is automatically generated by the channel layer (server)
            # dealing wit ha channel layer is an async operation, but so far we have syncronous code, so let's make everything async
            self.channel_name
        )
        
        # add and update online users
        if self.user not in self.chatroom.users_online.all():
            self.chatroom.users_online.add(self.user)
            self.update_online_count()
        self.accept()


    # Let's receive the data from the form, but it is in json format. so we need to convert it.
    def receive(self, text_data):
        text_data_json = json.loads(text_data)
        body = text_data_json['body'] # This is the message we get
        
        
        message = GroupMessage.objects.create(
            body = body,
            author = self.user,
            group = self.chatroom
        )
        
        event = {
            'type': 'message_handler',
            'message_id': message.id,
        }
        
        async_to_sync(self.channel_layer.group_send)(
            self.chatroom_name,event
        )
        
        
    def message_handler(self, event):
        message_id = event['message_id']
        message = GroupMessage.objects.get(id=message_id)
        context = {
            'message': message,
            'user':self.user
        }
        html = render_to_string("a_rtchat/partials/chat_message_p.html",context=context)
        self.send(text_data=html) 
    
    def update_online_count(self):
        online_count = self.chatroom.users_online.count() - 1
        # broadcast to all members of the public chatroom
        
        event = {
            'type': 'online_count_handler',
            'online_count': online_count
        }
        async_to_sync(self.channel_layer.group_send)(
            self.chatroom_name,event
        )
        
    def online_count_handler(self,event):
        online_count = event['online_count']
        html = render_to_string("a_rtchat/partials/online_count.html",{'online_count':online_count})
        # send the html to the client
        self.send(text_data = html)
    
    def disconnect(self, close_code):
        async_to_sync(self.channel_layer.group_discard)(
            self.chatroom_name,
            self.channel_name
        )
        
        if self.user in self.chatroom.users_online.all():
            self.chatroom.users_online.remove(self.user)
            self.update_online_count()